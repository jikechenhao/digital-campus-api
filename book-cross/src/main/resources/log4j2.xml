<?xml version="1.0" encoding="UTF-8"?>
<!--本配置文件是log4j2的xml形式配置文件，注意本文件的名字是【log4j2.xml】。如果不是这个名字的话则会识别不到导致配置无效。-->
<!--配置时尽量使用更语义化的写法-->
<!-- %d{HH:mm:ss.SSS} date 定义时间格式 -->
<!-- %t、%thread 输出线程名 -->
<!-- %-5level、%-5p、%level、%p log级别，不知道前面的-5是什么意思 -->
<!-- %class{36}、%C{36}调用logger的类名，%logger{36}调用logger时传的参数字符串，大多数情况下两者相同，但其实可以不同。 -->
<!-- 关于{n}的算法，将一个形如a.b.c.d.e的字符串split('.')，得到的数组从后往前截取n个，若n=3，则得到c.d.e，即得到当前类向上的n级包名-->
<!-- %L 代码所在行数 -->
<!-- %M logger输出语句所在的方法名 -->
<!-- %F 类文件名 -->
<!-- %msg、%m 输出的日志信息 -->
<!-- %n 系统换行符 -->
<!-- 优先级从高到低依次为：
    off：无论发生什么都完全没有任何日志输出，即相当于关闭了日志【不常用】
    fatal：发生了致命错误【常用，但频率不会太高，毕竟是致命错误】
    error：发生了错误【常用】
    warn：发现了警告【常用】
    info：一般信息【常用】
    debug：开发测试时输出的辅助信息【常用，在所有常用方法中是等级最低的】
    trace：追踪式，执行一步就输出一句日志【不常用】
    all：全面输出所有日志信息【不常用】
    日志输出时，高于或者等于指定优先级的信息都会输出，比如指定debug，那么debug级别会输出，高于debug的所有级别也会输出
-->
<!-- monitorInterval="1800"：每过1800秒，log4j2检查配置文件是否有变化，如果有变化即按照新的配置输出日志 -->
<!-- status 可以去掉，它的含义为是否记录log4j2本身的event信息，默认是OFF -->
<configuration status="OFF" monitorInterval="1800">
    <properties>
        <property name="LOG_TEMPLETE">
            %date{yyyy-MM-dd HH:mm:ss.SSS} [%thread] [%class{36}].%method (%line) %level ====> %msg %n
        </property>
    </properties>

    <!-- 输出控制器，即输出日志的配置，可以定义多个控制器供不同场景选择 -->
    <appenders>
        <!-- console，表明该控制器把日志信息输出在程序运行时的控制台界面-->
        <!-- name，是该输出控制器的名称，根据名称引用控制器 -->
        <!-- target，枚举值，指定输出文字在哪个java输出线程上打印，out和err是不同线程 -->
        <Console name="default_system_log" target="SYSTEM_OUT">
            <!-- 下面这行配置是log4j2默认的输出格式 -->
            <PatternLayout pattern="%d{HH:mm:ss.SSS} [%t] %-5level %logger{36} - %msg%n"/>
        </Console>
        <!-- 自定义控制器，输出在控制台上，选择err线程以示区别 -->
        <Console name="custom_log" target="SYSTEM_ERR">
            <PatternLayout pattern="${LOG_TEMPLETE}"/>
        </Console>
        <!-- file，表明该控制器把日志输出到一个【临时的】文件中-->
        <!-- append，指定是否追加，如果append是false的话，每次运行程序该文件就被清空重新开始，因为是临时日志所以我们这里配置为false -->
        <!-- filename，指定日志文件的全路径名，这里注意web项目中的目录引用写法-->
        <!-- 匹配规则：
        onMatch 当前级别和当前级别以上级别
        onMismatch 当前级别以下级别
        有三个可选值，分别是：
        ACCEPT，接受，即输出符合条件的日志
        DENY，否定，即不输出符合条件的日志
        NEUTRAL，中立，即不作操作，注意此时默认是输出，但是还需要看同时生效的别的配置
        比如配置：
        level="error" onMatch="DENY" onMismatch="NEUTRAL"
        level="info" onMatch="ACCEPT" onMismatch="DENY"
        即意为，error及以上级别不输出，以下级别待定，info及以上级别输出，以下级别不输出，则最终结果是输出info和warn。
        -->
        <!-- ThresholdFilter 输出过滤，只输出指定level级别及以上的信息
        下文中的配置会将开发测试日志、正常运行日志、严重错误日志分别记录在三个不同的文件中且内容互不重复
        -->
        <File name="debug_file_log" fileName="${web:rootDir}/log/debug.log" append="false">
            <Filters>
                <!--info及以上全部拒绝-->
                <ThresholdFilter level="info" onMatch="DENY" onMismatch="NEUTRAL"/>
                <!--debug以下全部拒绝-->
                <ThresholdFilter level="debug" onMatch="ACCEPT" onMismatch="NEUTRAL"/>
            </Filters>
            <PatternLayout pattern="${LOG_TEMPLETE}"/>
        </File>
        <!-- RollingFile，与临时日志相对的长期日志，这种日志强制是追加操作，到达最大容量后创建一个新的文件，并将之前的文件打包 -->
        <RollingFile name="info_file_log" fileName="${web:rootDir}/log/info.log"
                     filePattern="logs/$${date:yyyy-MM}/bookcross-info-%d{yyyy-MM-dd}-%i.log.gz">
            <Filters>
                <!--error及以上全部拒绝-->
                <ThresholdFilter level="error" onMatch="DENY" onMismatch="NEUTRAL"/>
                <!--info以下全部拒绝-->
                <ThresholdFilter level="info" onMatch="ACCEPT" onMismatch="DENY"/>
            </Filters>
            <PatternLayout pattern="${LOG_TEMPLETE}"/>
            <!-- SizeBasedTriggeringPolicy 日志文件最大容量，超过则打包-->
            <SizeBasedTriggeringPolicy size="200MB"/>
            <!-- TimeBasedTriggeringPolicy 打包时会按照时间间隔创建文件夹-->
            <TimeBasedTriggeringPolicy/>
            <!-- DefaultRolloverStrategy 最多保留多少个包-->
            <DefaultRolloverStrategy max="20"/>
        </RollingFile>
        <RollingFile name="error_file_log" fileName="${web:rootDir}/log/error.log"
                     filePattern="logs/$${date:yyyy-MM}/bookcross-error-%d{yyyy-MM-dd}-%i.log.gz">
            <Filters>
                <!--error以下全部拒绝-->
                <ThresholdFilter level="error" onMatch="ACCEPT" onMismatch="DENY"/>
            </Filters>
            <PatternLayout pattern="${LOG_TEMPLETE}"/>
            <SizeBasedTriggeringPolicy size="200MB"/>
            <TimeBasedTriggeringPolicy/>
            <DefaultRolloverStrategy max="20"/>
        </RollingFile>
    </appenders>
    <!--配置完控制器之后即可开始配置调用过程，这里可以不配置，有默认输出-->
    <loggers>
        <!-- additivity即配置为可叠加输出，如果为true的话，会输出两次，因为同时满足了root的优先级 -->
        <!-- logger的名字要 特别注意，这个名字其实是可以随便写的，只要在类中声明时给的参数和下面的name一致即可，
        使用中，一般不显式传入某个值，那么这时会默认使用当前类的路径，并逐级匹配。
        比如这里配置成 aaa.bbb，那么所有路径形如aaa.bbb.*.*...的类都会继承这个配置，
        特别注意：本质上并不是java的包概念，只是以.作为分级的标记 -->
        <logger name="com.hwedu" level="debug" additivity="false">
            <!-- 可以同时配置多个控制器-->
            <appender-ref ref="custom_log"/>
            <appender-ref ref="debug_file_log"/>
            <appender-ref ref="info_file_log"/>
            <appender-ref ref="error_file_log"/>
        </logger>
        <!-- 根logger配置，在某个类中声明了一个logger后，即使没有在配置文件中配置，也能正常工作，会自动继承root的配置，
        同时，如果声明了自定义的logger节点，就要像上面一样，additivity="false",这样就不会在输出自定义的日志的同时在输出一遍根日志 -->
        <root level="off">
            <appender-ref ref="default_system_log"/>
        </root>
    </loggers>
</configuration>
